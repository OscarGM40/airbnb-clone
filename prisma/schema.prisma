// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//con el generador de clientes indico qué clientes deben ser generados basados en el data model(que está más abajo)
generator client {
  provider = "prisma-client-js"
}

// con datasource configuro las fuentes de datos a los que se conectará Prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId // mapeo de id a MongoObjectId
  name           String?
  email          String?       @unique // la ? es si es opcional
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt // especial buit-in object
  favoriteIds   String[]      @db.ObjectId
  // relaciones
  accounts       Account[] //relacion con otro modelo
  listings       Listing[]
  reservations   Reservation[]
}

// Account debe hacer match con los campos del Social Login pues representa eso
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // la combination debe de ser unica
}

model Listing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime      @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  userId        String        @db.ObjectId
  price         Int
  // fijate que el onDelete lo pongo en la tabla hija
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
